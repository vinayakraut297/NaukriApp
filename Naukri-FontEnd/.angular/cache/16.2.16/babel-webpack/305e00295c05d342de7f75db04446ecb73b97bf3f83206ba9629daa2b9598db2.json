{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auth-service.service\";\nexport class RecruiterDashboardComponent {\n  constructor(fb, http, router, authService) {\n    this.fb = fb;\n    this.http = http;\n    this.router = router;\n    this.authService = authService;\n    this.username = ''; // To store the username\n    this.logout = new EventEmitter();\n  }\n  ngOnInit() {\n    // Initialize the recruiter form\n    this.recruiterForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      company: ['', Validators.required],\n      jobTitle: [''],\n      skillsRequired: ['']\n    });\n    // Retrieve user data (if needed)\n    const user = this.authService.getUser();\n    if (user) {\n      this.username = user.username; // Get the username\n    } else {\n      this.router.navigate(['/']); // Redirect if user not found\n    }\n  }\n\n  onSubmit() {\n    if (this.recruiterForm.valid) {\n      this.http.post('http://localhost:8080/recruitersDash/register', this.recruiterForm.value).subscribe(response => {\n        console.log('Recruiter registered successfully', response);\n        // Optionally reset the form or redirect after submission\n        this.recruiterForm.reset(); // Resets the form after submission\n      }, error => {\n        console.error('Error occurred during registration', error);\n      });\n    }\n  }\n  onLogout() {\n    this.authService.clearUser(); // Clear user data\n    this.router.navigate(['/']); // Redirect to login page\n  }\n\n  static {\n    this.ɵfac = function RecruiterDashboardComponent_Factory(t) {\n      return new (t || RecruiterDashboardComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.AuthService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RecruiterDashboardComponent,\n      selectors: [[\"app-recruiter-dashboard\"]],\n      outputs: {\n        logout: \"logout\"\n      },\n      decls: 4,\n      vars: 1,\n      consts: [[3, \"click\"]],\n      template: function RecruiterDashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h3\");\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"button\", 0);\n          i0.ɵɵlistener(\"click\", function RecruiterDashboardComponent_Template_button_click_2_listener() {\n            return ctx.onLogout();\n          });\n          i0.ɵɵtext(3, \"Logout\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\"Welcome to Recruiter Dashboard \", ctx.username, \" !\");\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","Validators","RecruiterDashboardComponent","constructor","fb","http","router","authService","username","logout","ngOnInit","recruiterForm","group","name","required","email","company","jobTitle","skillsRequired","user","getUser","navigate","onSubmit","valid","post","value","subscribe","response","console","log","reset","error","onLogout","clearUser","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","HttpClient","i3","Router","i4","AuthService","selectors","outputs","decls","vars","consts","template","RecruiterDashboardComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","RecruiterDashboardComponent_Template_button_click_2_listener","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["D:\\Java Hefshine\\Angular\\NaukriApp1\\src\\app\\recruiter-dashboard\\recruiter-dashboard.component.ts","D:\\Java Hefshine\\Angular\\NaukriApp1\\src\\app\\recruiter-dashboard\\recruiter-dashboard.component.html"],"sourcesContent":["import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth-service.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-recruiter-dashboard',\n  templateUrl: './recruiter-dashboard.component.html',\n  styleUrls: ['./recruiter-dashboard.component.css']\n})\nexport class RecruiterDashboardComponent implements OnInit {\n  recruiterForm!: FormGroup; // Use the definite assignment assertion\n  username: string = ''; // To store the username\n  @Output() logout = new EventEmitter<void>();\n\n  constructor(\n    private fb: FormBuilder,\n    private http: HttpClient,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    // Initialize the recruiter form\n    this.recruiterForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      company: ['', Validators.required],\n      jobTitle: [''],\n      skillsRequired: ['']\n    });\n\n    // Retrieve user data (if needed)\n    const user = this.authService.getUser();\n    if (user) {\n      this.username = user.username; // Get the username\n    } else {\n      this.router.navigate(['/']); // Redirect if user not found\n    }\n  }\n\n  onSubmit(): void {\n    if (this.recruiterForm.valid) {\n      this.http.post('http://localhost:8080/recruitersDash/register', this.recruiterForm.value)\n        .subscribe(response => {\n          console.log('Recruiter registered successfully', response);\n          // Optionally reset the form or redirect after submission\n          this.recruiterForm.reset(); // Resets the form after submission\n        }, error => {\n          console.error('Error occurred during registration', error);\n        });\n    }\n  }\n\n  onLogout() {\n    this.authService.clearUser(); // Clear user data\n    this.router.navigate(['/']); // Redirect to login page\n  }\n}\n\n\n// import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { AuthService } from '../auth-service.service';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { HttpClient } from '@angular/common/http';\n\n// @Component({\n//   selector: 'app-recruiter-dashboard',\n//   templateUrl: './recruiter-dashboard.component.html',\n//   styleUrls: ['./recruiter-dashboard.component.css']\n// })\n// export class RecruiterDashboardComponent implements OnInit {\n//   // recruiterForm: FormGroup; // FormGroup for the recruiter form\n//   recruiterForm!: FormGroup; \n//   username: string = ''; // To store the username\n//   @Output() logout = new EventEmitter<void>();\n\n//   constructor(\n//     private fb: FormBuilder,\n//     private http: HttpClient,\n//     private router: Router,\n//     private authService: AuthService\n//   ) {}\n\n//   ngOnInit(): void {\n//     // Initialize the recruiter form\n//     this.recruiterForm = this.fb.group({\n//       name: ['', Validators.required],\n//       email: ['', [Validators.required, Validators.email]],\n//       company: ['', Validators.required],\n//       jobTitle: [''],\n//       skillsRequired: ['']\n//     });\n\n//     // Retrieve user data (if needed)\n//     const user = this.authService.getUser();\n//     if (user) {\n//       this.username = user.username; // Get the username\n//     } else {\n//       this.router.navigate(['/']); // Redirect if user not found\n//     }\n//   }\n\n//   onSubmit(): void {\n//     if (this.recruiterForm.valid) {\n//       this.http.post('http://localhost:8080/recruitersDash/register', this.recruiterForm.value)\n//         .subscribe(response => {\n//           console.log('Recruiter registered successfully', response);\n//           // Optionally reset the form or redirect after submission\n//           this.recruiterForm.reset(); // Resets the form after submission\n//         }, error => {\n//           console.error('Error occurred during registration', error);\n//         });\n//     }\n//   }\n\n//   onLogout() {\n//     this.authService.clearUser(); // Clear user data\n//     this.router.navigate(['/']); // Redirect to login page\n//   }\n// }\n\n\n// import { Component, EventEmitter, Output } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { AuthService } from '../auth-service.service';\n\n// @Component({\n//   selector: 'app-recruiter-dashboard',\n//   templateUrl: './recruiter-dashboard.component.html',\n//   styleUrls: ['./recruiter-dashboard.component.css']\n// })\n// export class RecruiterDashboardComponent {\n//   username: string = ''; // To store the username\n//   @Output() logout = new EventEmitter<void>();\n//   constructor(private router: Router, private authService: AuthService) {}\n\n//   onLogout() {\n//     this.authService.clearUser(); // Clear user data\n//     this.router.navigate(['/']); // Redirect to login page\n//   }\n// }\n","<h3>Welcome to Recruiter Dashboard {{ username }} !</h3>\n<button (click)=\"onLogout()\">Logout</button>\n\n<!-- <form [formGroup]=\"recruiterForm\" (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"name\">Name</label>\n    <input id=\"name\" formControlName=\"name\" placeholder=\"Enter your name\" />\n    <div *ngIf=\"recruiterForm.get('name')?.invalid && recruiterForm.get('name')?.touched\">\n      Name is required\n    </div>\n  </div>\n\n  <div>\n    <label for=\"email\">Email</label>\n    <input id=\"email\" formControlName=\"email\" placeholder=\"Enter your email\" />\n    <div *ngIf=\"recruiterForm.get('email')?.invalid && recruiterForm.get('email')?.touched\">\n      Valid email is required\n    </div>\n  </div>\n\n  <div>\n    <label for=\"company\">Company</label>\n    <input id=\"company\" formControlName=\"company\" placeholder=\"Enter your company name\" />\n    <div *ngIf=\"recruiterForm.get('company')?.invalid && recruiterForm.get('company')?.touched\">\n      Company name is required\n    </div>\n  </div>\n\n  <div>\n    <label for=\"jobTitle\">Job Title</label>\n    <input id=\"jobTitle\" formControlName=\"jobTitle\" placeholder=\"Enter the job title\" />\n  </div>\n\n  <div>\n    <label for=\"skillsRequired\">Skills Required</label>\n    <input id=\"skillsRequired\" formControlName=\"skillsRequired\" placeholder=\"Enter required skills\" />\n  </div>\n\n  <button type=\"submit\" [disabled]=\"recruiterForm.invalid\">Submit</button>\n</form> -->\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}