{"ast":null,"code":"\"use strict\";\n\n// import { Component, OnInit } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { CompanyDriveService } from '../services/company-drive.service';\n// interface CompanyDrive {\n//   id: number;\n//   company: string;\n//   skillsRequired: string;\n//   location: string;\n//   jobTitle: string;\n// }\n// @Component({\n//   selector: 'app-drive',\n//   templateUrl: './drive.component.html',\n//   styleUrls: ['./drive.component.css']\n// })\n// export class DriveComponent implements OnInit {\n//   companyDrives: CompanyDrive[] = [];\n//   selectedFile: File | null = null;\n//   constructor(private http: HttpClient) {}\n//   ngOnInit() {\n//     this.fetchCompanyDrives();\n//   }\n//   fetchCompanyDrives() {\n//     // this.http.get<CompanyDrive[]>('http://localhost:8080/companydrives/getAllCompany')\n//     this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n//       .subscribe((data) => {\n//         this.companyDrives = data;\n//       });\n//   }  \n// onFileSelected(event: Event) {\n//   const fileInput = event.target as HTMLInputElement;\n//   if (fileInput.files && fileInput.files.length > 0) {\n//     this.selectedFile = fileInput.files[0];\n//   }\n// }\n// // applyToCompany(drive: any) {\n// //   if (this.selectedFile) {\n// //     const formData = new FormData();\n// //     formData.append('resume', this.selectedFile);\n// //     // Use the recruiter ID for application\n// //     this.http.post(`http://localhost:8080/companydrives/apply/${drive.id}`, formData)\n// //       .subscribe(response => {\n// //         console.log('Application successful', response);\n// //       }, error => {\n// //         console.error('Error in application', error);\n// //       });\n// //   } else {\n// //     alert('Please select a file before applying.');\n// //   }\n// // }\n// applyToCompany(drive: any) {\n//   if (this.selectedFile) {\n//     const formData = new FormData();\n//     formData.append('file', this.selectedFile);  // Ensure the parameter name matches backend expectation\n//     // POST request to apply with file attached\n//     this.http.post(`http://localhost:8080/companydrives/apply/${drive.id}`, formData)\n//       .subscribe(response => {\n//         console.log('Application successful', response);\n//       }, error => {\n//         console.error('Error in application', error);\n//       });\n//   } else {\n//     alert('Please select a Resume before applying.');\n//   }\n// }\n//   rejectCompany(drive: any): void {\n//     // Logic to handle rejecting the company\n//     alert(`Rejecting company: ${drive.company}`);\n//     console.log(`Rejecting company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n// }","map":{"version":3,"names":[],"sources":["D:\\Java Hefshine\\Angular\\NaukriApp\\src\\app\\drive\\drive.component.ts"],"sourcesContent":["\n\n// import { Component, OnInit } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { CompanyDriveService } from '../services/company-drive.service';\n\n// interface CompanyDrive {\n//   id: number;\n//   company: string;\n//   skillsRequired: string;\n//   location: string;\n//   jobTitle: string;\n// }\n\n// @Component({\n//   selector: 'app-drive',\n//   templateUrl: './drive.component.html',\n//   styleUrls: ['./drive.component.css']\n// })\n// export class DriveComponent implements OnInit {\n//   companyDrives: CompanyDrive[] = [];\n//   selectedFile: File | null = null;\n\n//   constructor(private http: HttpClient) {}\n\n//   ngOnInit() {\n//     this.fetchCompanyDrives();\n//   }\n\n//   fetchCompanyDrives() {\n//     // this.http.get<CompanyDrive[]>('http://localhost:8080/companydrives/getAllCompany')\n//     this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n//       .subscribe((data) => {\n//         this.companyDrives = data;\n//       });\n//   }  \n\n\n// onFileSelected(event: Event) {\n//   const fileInput = event.target as HTMLInputElement;\n//   if (fileInput.files && fileInput.files.length > 0) {\n//     this.selectedFile = fileInput.files[0];\n//   }\n// }\n\n// // applyToCompany(drive: any) {\n// //   if (this.selectedFile) {\n// //     const formData = new FormData();\n// //     formData.append('resume', this.selectedFile);\n    \n// //     // Use the recruiter ID for application\n// //     this.http.post(`http://localhost:8080/companydrives/apply/${drive.id}`, formData)\n// //       .subscribe(response => {\n// //         console.log('Application successful', response);\n// //       }, error => {\n// //         console.error('Error in application', error);\n// //       });\n// //   } else {\n// //     alert('Please select a file before applying.');\n// //   }\n// // }\n\n// applyToCompany(drive: any) {\n//   if (this.selectedFile) {\n//     const formData = new FormData();\n//     formData.append('file', this.selectedFile);  // Ensure the parameter name matches backend expectation\n    \n//     // POST request to apply with file attached\n//     this.http.post(`http://localhost:8080/companydrives/apply/${drive.id}`, formData)\n//       .subscribe(response => {\n//         console.log('Application successful', response);\n//       }, error => {\n//         console.error('Error in application', error);\n//       });\n//   } else {\n//     alert('Please select a Resume before applying.');\n//   }\n\n// }\n//   rejectCompany(drive: any): void {\n//     // Logic to handle rejecting the company\n//     alert(`Rejecting company: ${drive.company}`);\n//     console.log(`Rejecting company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n// }\n"],"mappings":";;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}