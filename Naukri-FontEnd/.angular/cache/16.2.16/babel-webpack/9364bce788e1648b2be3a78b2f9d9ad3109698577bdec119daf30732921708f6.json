{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DriveComponent = class DriveComponent {\n  constructor(http) {\n    this.http = http;\n    this.companyDrives = [];\n    this.selectedFile = null;\n  }\n  ngOnInit() {\n    this.fetchCompanyDrives();\n  }\n  fetchCompanyDrives() {\n    // this.http.get<CompanyDrive[]>('http://localhost:8080/companydrives/getAllCompany')\n    this.http.get('http://localhost:8080/recruiter/getAllCompany').subscribe(data => {\n      this.companyDrives = data;\n    });\n  }\n  onFileSelected(event) {\n    const fileInput = event.target;\n    if (fileInput.files && fileInput.files.length > 0) {\n      this.selectedFile = fileInput.files[0];\n    }\n  }\n  applyToCompany(drive) {\n    if (this.selectedFile) {\n      const formData = new FormData();\n      formData.append('resume', this.selectedFile);\n      // Use the recruiter ID for application\n      this.http.post(`http://localhost:8080/companydrives/apply/${drive.id}`, formData).subscribe(response => {\n        console.log('Application successful', response);\n      }, error => {\n        console.error('Error in application', error);\n      });\n    } else {\n      alert('Please select a file before applying.');\n    }\n  }\n  rejectCompany(drive) {\n    // Logic to handle rejecting the company\n    console.log(`Rejecting company: ${drive.company}`);\n    // Add your backend integration here\n  }\n};\n\nDriveComponent = __decorate([Component({\n  selector: 'app-drive',\n  templateUrl: './drive.component.html',\n  styleUrls: ['./drive.component.css']\n})], DriveComponent);","map":{"version":3,"names":["Component","DriveComponent","constructor","http","companyDrives","selectedFile","ngOnInit","fetchCompanyDrives","get","subscribe","data","onFileSelected","event","fileInput","target","files","length","applyToCompany","drive","formData","FormData","append","post","id","response","console","log","error","alert","rejectCompany","company","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Java Hefshine\\Angular\\NaukriApp\\src\\app\\drive\\drive.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CompanyDriveService } from '../services/company-drive.service';\n\ninterface CompanyDrive {\n  id: number;\n  company: string;\n  skillsRequired: string;\n  location: string;\n  jobTitle: string;\n}\n\n@Component({\n  selector: 'app-drive',\n  templateUrl: './drive.component.html',\n  styleUrls: ['./drive.component.css']\n})\nexport class DriveComponent implements OnInit {\n  companyDrives: CompanyDrive[] = [];\n  selectedFile: File | null = null;\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.fetchCompanyDrives();\n  }\n\n  fetchCompanyDrives() {\n    // this.http.get<CompanyDrive[]>('http://localhost:8080/companydrives/getAllCompany')\n    this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n      .subscribe((data) => {\n        this.companyDrives = data;\n      });\n  }  \n\n\nonFileSelected(event: Event) {\n  const fileInput = event.target as HTMLInputElement;\n  if (fileInput.files && fileInput.files.length > 0) {\n    this.selectedFile = fileInput.files[0];\n  }\n}\n\napplyToCompany(drive: any) {\n  if (this.selectedFile) {\n    const formData = new FormData();\n    formData.append('resume', this.selectedFile);\n    \n    // Use the recruiter ID for application\n    this.http.post(`http://localhost:8080/companydrives/apply/${drive.id}`, formData)\n      .subscribe(response => {\n        console.log('Application successful', response);\n      }, error => {\n        console.error('Error in application', error);\n      });\n  } else {\n    alert('Please select a file before applying.');\n  }\n}\n\n\n  rejectCompany(drive: any): void {\n    // Logic to handle rejecting the company\n    console.log(`Rejecting company: ${drive.company}`);\n    // Add your backend integration here\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAiB1C,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,aAAa,GAAmB,EAAE;IAClC,KAAAC,YAAY,GAAgB,IAAI;EAEO;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkBA,CAAA;IAChB;IACA,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAiB,+CAA+C,CAAC,CAC3EC,SAAS,CAAEC,IAAI,IAAI;MAClB,IAAI,CAACN,aAAa,GAAGM,IAAI;IAC3B,CAAC,CAAC;EACN;EAGFC,cAAcA,CAACC,KAAY;IACzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAA0B;IAClD,IAAID,SAAS,CAACE,KAAK,IAAIF,SAAS,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACjD,IAAI,CAACX,YAAY,GAAGQ,SAAS,CAACE,KAAK,CAAC,CAAC,CAAC;;EAE1C;EAEAE,cAAcA,CAACC,KAAU;IACvB,IAAI,IAAI,CAACb,YAAY,EAAE;MACrB,MAAMc,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAChB,YAAY,CAAC;MAE5C;MACA,IAAI,CAACF,IAAI,CAACmB,IAAI,CAAC,6CAA6CJ,KAAK,CAACK,EAAE,EAAE,EAAEJ,QAAQ,CAAC,CAC9EV,SAAS,CAACe,QAAQ,IAAG;QACpBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,QAAQ,CAAC;MACjD,CAAC,EAAEG,KAAK,IAAG;QACTF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CAAC;KACL,MAAM;MACLC,KAAK,CAAC,uCAAuC,CAAC;;EAElD;EAGEC,aAAaA,CAACX,KAAU;IACtB;IACAO,OAAO,CAACC,GAAG,CAAC,sBAAsBR,KAAK,CAACY,OAAO,EAAE,CAAC;IAClD;EACF;CACD;;AAjDY7B,cAAc,GAAA8B,UAAA,EAL1B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWjC,cAAc,CAiD1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}