{"ast":null,"code":"// import { Component, OnInit } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { CompanyDriveService } from '../services/company-drive.service';\nimport { __decorate } from \"tslib\";\n// interface CompanyDrive {\n//   id: number;\n//   company: string;\n//   skillsRequired: string;\n//   location: string;\n//   jobTitle: string;\n// }\n// @Component({\n//   selector: 'app-drive',\n//   templateUrl: './drive.component.html',\n//   styleUrls: ['./drive.component.css']\n// })\n// export class DriveComponent implements OnInit {\n//   companyDrives: CompanyDrive[] = [];\n//   constructor(private http: HttpClient) {}\n//   ngOnInit() {\n//     this.fetchCompanyDrives();\n//   }\n//   fetchCompanyDrives() {\n//     this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n//       .subscribe((data) => {\n//         this.companyDrives = data;\n//       });\n//   }\n//   applyToCompany(drive: any): void {\n//     // Logic to handle applying to the company\n//     console.log(`Applying to company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n//   rejectCompany(drive: any): void {\n//     // Logic to handle rejecting the company\n//     console.log(`Rejecting company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n// }\n// drive.component.ts\nexport let DriveComponent = class DriveComponent {\n  constructor(http) {\n    this.http = http;\n    this.companyDrives = [];\n    this.loadCompanyDrives();\n  }\n  loadCompanyDrives() {\n    // Fetch the list of companies from the backend\n    this.http.get(`${environment.apiUrl}/company-drives`).subscribe(data => {\n      this.companyDrives = data;\n    });\n  }\n  applyToCompany(drive) {\n    // Send a POST request to apply to the company\n    this.http.post(`${environment.apiUrl}/company-drives/apply`, drive).subscribe(response => {\n      // Optionally, update UI based on response\n      console.log('Applied successfully', response);\n    });\n  }\n  rejectCompany(drive) {\n    // Send a DELETE request to reject the company\n    this.http.delete(`${environment.apiUrl}/company-drives/reject/${drive.id}`).subscribe(response => {\n      // Remove the rejected company from the table\n      this.companyDrives = this.companyDrives.filter(c => c.id !== drive.id);\n      console.log('Rejected successfully', response);\n    });\n  }\n};\nDriveComponent = __decorate([Component({\n  selector: 'app-drive',\n  templateUrl: './drive.component.html'\n})], DriveComponent);","map":{"version":3,"names":["DriveComponent","constructor","http","companyDrives","loadCompanyDrives","get","environment","apiUrl","subscribe","data","applyToCompany","drive","post","response","console","log","rejectCompany","delete","id","filter","c","__decorate","Component","selector","templateUrl"],"sources":["D:\\Java Hefshine\\Angular\\NaukriApp\\src\\app\\drive\\drive.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { CompanyDriveService } from '../services/company-drive.service';\n\n// interface CompanyDrive {\n//   id: number;\n//   company: string;\n//   skillsRequired: string;\n//   location: string;\n//   jobTitle: string;\n// }\n\n// @Component({\n//   selector: 'app-drive',\n//   templateUrl: './drive.component.html',\n//   styleUrls: ['./drive.component.css']\n// })\n// export class DriveComponent implements OnInit {\n//   companyDrives: CompanyDrive[] = [];\n\n//   constructor(private http: HttpClient) {}\n\n//   ngOnInit() {\n//     this.fetchCompanyDrives();\n//   }\n\n//   fetchCompanyDrives() {\n//     this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n//       .subscribe((data) => {\n//         this.companyDrives = data;\n//       });\n//   }\n//   applyToCompany(drive: any): void {\n//     // Logic to handle applying to the company\n//     console.log(`Applying to company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n  \n//   rejectCompany(drive: any): void {\n//     // Logic to handle rejecting the company\n//     console.log(`Rejecting company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n// }\n\n\n// drive.component.ts\n\n\n@Component({\n  selector: 'app-drive',\n  templateUrl: './drive.component.html',\n})\nexport class DriveComponent {\n  companyDrives: CompanyDrive[] = [];\n\n  constructor(private http: HttpClient) {\n    this.loadCompanyDrives();\n  }\n\n  loadCompanyDrives() {\n    // Fetch the list of companies from the backend\n    this.http.get<CompanyDrive[]>(`${environment.apiUrl}/company-drives`)\n      .subscribe(data => {\n        this.companyDrives = data;\n      });\n  }\n\n  applyToCompany(drive: CompanyDrive) {\n    // Send a POST request to apply to the company\n    this.http.post(`${environment.apiUrl}/company-drives/apply`, drive)\n      .subscribe(response => {\n        // Optionally, update UI based on response\n        console.log('Applied successfully', response);\n      });\n  }\n\n  rejectCompany(drive: CompanyDrive) {\n    // Send a DELETE request to reject the company\n    this.http.delete(`${environment.apiUrl}/company-drives/reject/${drive.id}`)\n      .subscribe(response => {\n        // Remove the rejected company from the table\n        this.companyDrives = this.companyDrives.filter(c => c.id !== drive.id);\n        console.log('Rejected successfully', response);\n      });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAOO,WAAMA,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,aAAa,GAAmB,EAAE;IAGhC,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiBA,CAAA;IACf;IACA,IAAI,CAACF,IAAI,CAACG,GAAG,CAAiB,GAAGC,WAAW,CAACC,MAAM,iBAAiB,CAAC,CAClEC,SAAS,CAACC,IAAI,IAAG;MAChB,IAAI,CAACN,aAAa,GAAGM,IAAI;IAC3B,CAAC,CAAC;EACN;EAEAC,cAAcA,CAACC,KAAmB;IAChC;IACA,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAGN,WAAW,CAACC,MAAM,uBAAuB,EAAEI,KAAK,CAAC,CAChEH,SAAS,CAACK,QAAQ,IAAG;MACpB;MACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,QAAQ,CAAC;IAC/C,CAAC,CAAC;EACN;EAEAG,aAAaA,CAACL,KAAmB;IAC/B;IACA,IAAI,CAACT,IAAI,CAACe,MAAM,CAAC,GAAGX,WAAW,CAACC,MAAM,0BAA0BI,KAAK,CAACO,EAAE,EAAE,CAAC,CACxEV,SAAS,CAACK,QAAQ,IAAG;MACpB;MACA,IAAI,CAACV,aAAa,GAAG,IAAI,CAACA,aAAa,CAACgB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKP,KAAK,CAACO,EAAE,CAAC;MACtEJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,QAAQ,CAAC;IAChD,CAAC,CAAC;EACN;CACD;AAjCYb,cAAc,GAAAqB,UAAA,EAJ1BC,SAAS,CAAC;EACTC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE;CACd,CAAC,C,EACWxB,cAAc,CAiC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}