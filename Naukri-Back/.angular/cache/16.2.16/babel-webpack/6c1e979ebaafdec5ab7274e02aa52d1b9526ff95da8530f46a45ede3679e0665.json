{"ast":null,"code":"import { EnvironmentInjector } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction DriveComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 1);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 1);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function DriveComponent_tr_14_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const drive_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.applyToCompany(drive_r1));\n    });\n    i0.ɵɵtext(9, \"Apply\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function DriveComponent_tr_14_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const drive_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.rejectCompany(drive_r1));\n    });\n    i0.ɵɵtext(11, \"Reject\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const drive_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(drive_r1.company);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(drive_r1.skillsRequired);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(drive_r1.jobTitle);\n  }\n}\n// interface CompanyDrive {\n//   id: number;\n//   company: string;\n//   skillsRequired: string;\n//   location: string;\n//   jobTitle: string;\n// }\n// @Component({\n//   selector: 'app-drive',\n//   templateUrl: './drive.component.html',\n//   styleUrls: ['./drive.component.css']\n// })\n// export class DriveComponent implements OnInit {\n//   companyDrives: CompanyDrive[] = [];\n//   constructor(private http: HttpClient) {}\n//   ngOnInit() {\n//     this.fetchCompanyDrives();\n//   }\n//   fetchCompanyDrives() {\n//     this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n//       .subscribe((data) => {\n//         this.companyDrives = data;\n//       });\n//   }\n//   applyToCompany(drive: any): void {\n//     // Logic to handle applying to the company\n//     console.log(`Applying to company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n//   rejectCompany(drive: any): void {\n//     // Logic to handle rejecting the company\n//     console.log(`Rejecting company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n// }\n// drive.component.ts\nexport class DriveComponent {\n  constructor(http) {\n    this.http = http;\n    this.companyDrives = [];\n    this.loadCompanyDrives();\n  }\n  loadCompanyDrives() {\n    // Fetch the list of companies from the backend\n    this.http.get(`${EnvironmentInjector.apiUrl}/company-drives`).subscribe(data => {\n      this.companyDrives = data;\n    });\n  }\n  applyToCompany(drive) {\n    // Send a POST request to apply to the company\n    this.http.post(`${environment.apiUrl}/company-drives/apply`, drive).subscribe(response => {\n      // Optionally, update UI based on response\n      console.log('Applied successfully', response);\n    });\n  }\n  rejectCompany(drive) {\n    // Send a DELETE request to reject the company\n    this.http.delete(`${environment.apiUrl}/company-drives/reject/${drive.id}`).subscribe(response => {\n      // Remove the rejected company from the table\n      this.companyDrives = this.companyDrives.filter(c => c.id !== drive.id);\n      console.log('Rejected successfully', response);\n    });\n  }\n  static {\n    this.ɵfac = function DriveComponent_Factory(t) {\n      return new (t || DriveComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DriveComponent,\n      selectors: [[\"app-drive\"]],\n      decls: 15,\n      vars: 1,\n      consts: [[2, \"border-collapse\", \"collapse\", \"width\", \"100%\", \"border\", \"1px solid black\"], [2, \"border\", \"1px solid black\", \"padding\", \"8px\"], [4, \"ngFor\", \"ngForOf\"], [2, \"border\", \"1px solid black\", \"padding\", \"8px\", 3, \"click\"]],\n      template: function DriveComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Company Drive Information\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"table\", 0)(3, \"thead\")(4, \"tr\")(5, \"th\", 1);\n          i0.ɵɵtext(6, \"Company Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"th\", 1);\n          i0.ɵɵtext(8, \"Skills Required\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"th\", 1);\n          i0.ɵɵtext(10, \"Job Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"th\", 1);\n          i0.ɵɵtext(12, \"Actions(Apply/Reject)\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(13, \"tbody\");\n          i0.ɵɵtemplate(14, DriveComponent_tr_14_Template, 12, 3, \"tr\", 2);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"ngForOf\", ctx.companyDrives);\n        }\n      },\n      dependencies: [i2.NgForOf],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["EnvironmentInjector","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","DriveComponent_tr_14_Template_button_click_8_listener","restoredCtx","ɵɵrestoreView","_r3","drive_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","applyToCompany","DriveComponent_tr_14_Template_button_click_10_listener","ctx_r4","rejectCompany","ɵɵadvance","ɵɵtextInterpolate","company","skillsRequired","jobTitle","DriveComponent","constructor","http","companyDrives","loadCompanyDrives","get","apiUrl","subscribe","data","drive","post","environment","response","console","log","delete","id","filter","c","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","DriveComponent_Template","rf","ctx","ɵɵtemplate","DriveComponent_tr_14_Template","ɵɵproperty"],"sources":["D:\\Java Hefshine\\Angular\\NaukriApp\\src\\app\\drive\\drive.component.ts","D:\\Java Hefshine\\Angular\\NaukriApp\\src\\app\\drive\\drive.component.html"],"sourcesContent":["import { Component, EnvironmentInjector, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { CompanyDriveService } from '../services/company-drive.service';\n\n// interface CompanyDrive {\n//   id: number;\n//   company: string;\n//   skillsRequired: string;\n//   location: string;\n//   jobTitle: string;\n// }\n\n// @Component({\n//   selector: 'app-drive',\n//   templateUrl: './drive.component.html',\n//   styleUrls: ['./drive.component.css']\n// })\n// export class DriveComponent implements OnInit {\n//   companyDrives: CompanyDrive[] = [];\n\n//   constructor(private http: HttpClient) {}\n\n//   ngOnInit() {\n//     this.fetchCompanyDrives();\n//   }\n\n//   fetchCompanyDrives() {\n//     this.http.get<CompanyDrive[]>('http://localhost:8080/recruiter/getAllCompany')\n//       .subscribe((data) => {\n//         this.companyDrives = data;\n//       });\n//   }\n//   applyToCompany(drive: any): void {\n//     // Logic to handle applying to the company\n//     console.log(`Applying to company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n  \n//   rejectCompany(drive: any): void {\n//     // Logic to handle rejecting the company\n//     console.log(`Rejecting company: ${drive.company}`);\n//     // Add your backend integration here\n//   }\n// }\n\n\n// drive.component.ts\n\n\n@Component({\n  selector: 'app-drive',\n  templateUrl: './drive.component.html',\n})\nexport class DriveComponent {\n  companyDrives: CompanyDriveService[] = [];\n\n  constructor(private http: HttpClient) {\n    this.loadCompanyDrives();\n  }\n\n  loadCompanyDrives() {\n    // Fetch the list of companies from the backend\n    this.http.get<CompanyDriveService[]>(`${EnvironmentInjector.apiUrl}/company-drives`)\n      .subscribe(data => {\n        this.companyDrives = data;\n      });\n  }\n\n  applyToCompany(drive: CompanyDrive) {\n    // Send a POST request to apply to the company\n    this.http.post(`${environment.apiUrl}/company-drives/apply`, drive)\n      .subscribe(response => {\n        // Optionally, update UI based on response\n        console.log('Applied successfully', response);\n      });\n  }\n\n  rejectCompany(drive: CompanyDrive) {\n    // Send a DELETE request to reject the company\n    this.http.delete(`${environment.apiUrl}/company-drives/reject/${drive.id}`)\n      .subscribe(response => {\n        // Remove the rejected company from the table\n        this.companyDrives = this.companyDrives.filter(c => c.id !== drive.id);\n        console.log('Rejected successfully', response);\n      });\n  }\n}\n","<h2>Company Drive Information</h2>\n<table style=\"border-collapse: collapse; width: 100%; border: 1px solid black;\">\n    <thead>\n    <tr>\n      <th style=\"border: 1px solid black; padding: 8px;\">Company Name</th>\n      <th style=\"border: 1px solid black; padding: 8px;\">Skills Required</th>\n      <th style=\"border: 1px solid black; padding: 8px;\">Job Title</th>\n      <th style=\"border: 1px solid black; padding: 8px;\">Actions(Apply/Reject)</th> <!-- Added a new column for actions -->\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let drive of companyDrives\">\n      <td style=\"border: 1px solid black; padding: 8px;\">{{ drive.company }}</td>\n      <td style=\"border: 1px solid black; padding: 8px;\">{{ drive.skillsRequired }}</td>\n      <td style=\"border: 1px solid black; padding: 8px;\">{{ drive.jobTitle }}</td>\n      <td>\n        <!-- Buttons for Apply and Reject actions -->\n        <button style=\"border: 1px solid black; padding: 8px;\" (click)=\"applyToCompany(drive)\">Apply</button> \n        <button style=\"border: 1px solid black; padding: 8px;\" (click)=\"rejectCompany(drive)\">Reject</button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}